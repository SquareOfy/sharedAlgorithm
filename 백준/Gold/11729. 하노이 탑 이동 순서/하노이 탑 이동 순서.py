'''
아이디어
n개의 원판을 옮기는 하노이는 최종적으로 맨 아래 가장 큰 원판을 목적지에
옮겨야 그 위의 다른 원판들도 그 위에 올릴 수 있다. 
즉, 가장 큰 원판을 목적지에 옮기는 부분과정들을 해결하면
최종적으로 n개의 원판 전체를 옮기는 큰 문제를 해결할 수 있다.

n개의 원판을 목적지로 옮기는 과정을 아래와 같이 분할해서 볼 수 있다.
1. 맨 위부터 n-1번째의 원판을 목적지가 아닌 남은 스틱에 옮긴다.
2. 맨 아래의 가장 큰 원판을 목적지로 옮긴다. 
3. 임의로 남은 스틱에 빼두었던 n-1개의 스틱을 최종 목적지에 옮긴다.

위 과정에서 3번 과정은 결국 n의 값만 줄어들었을 뿐 n개의 원판을 옮기는 과정과
동일한 과정이 반복될 것이다. 
따라서 이 부분을 재귀를 활용해 구현할 수 있다. 
'''


def get_idx(start, end):
    '''
    목적지로 제일 마지막 원판을 옮기기 전, 
    임의로 빼둘 n-1개의 원판을 어디로 옮길지 알기 위해 
    남은 스틱 번호를 구하는 함수
    :param start: 시작하는 스틱 번호
    :param end: 최종적으로 옮기고 싶은 스틱번호
    :return: 두 스틱을 제외한 남은 스틱의 번호
    '''
    if (start, end) in ((1, 3), (3, 1)):
        return 2
    if (start, end) in ((1, 2), (2, 1)):
        return 3
    if (start, end) in ((2, 3), (3, 2)):
        return 1

#하노이 순서 출력
def hanoi(start, end, k):
    #원판 하나를 옮기는 경우, 시작지점에서 끝지점 바로 옮기기
    if k == 1:
        print(start, end)
        return
    #n-1개의 원판을 옮길 목적지의 번호 구하기
    mid = get_idx(start, end)
    
    #n-1개의 원판은 우선 mid 스틱에 빼두기
    hanoi(start, mid, k-1)
    hanoi(start, end, 1) #제일 큰 원판 목적지로 옮기기
    hanoi(mid, end, k-1) #빼두었던 n-1개의 원판을 최종 목적지로 옮기기


n = int(input())
print(2**n-1)
hanoi(1, 3, n)